# interpreter for shell commands
set shell sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %trash $fx

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

### Custom Config ###

# Remove some defaults
map o
map d
map e
map f
map t
map y

# Basic Settings
# set previewer ~/.config/lf/previewer.sh
# set preview true
# set hidden true
# set drawbox true
set info size
set dircounts
set icons on
set ignorecase true
set previewer ~/.config/lf/lf_kitty_preview
set cleaner ~/.config/lf/lf_kitty_clean
set ratios '1:2:2'

cmd mkdir %{{
  printf "Directory Name: "
  read ans
  mkdir -p $ans
  lf -remote "send $id select '${ans}'"
}}

cmd mkfile %{{
  printf "File Name: "
  read ans
  DIR=$(dirname "$ans")
  FILE=$(basename "$ans")
  mkdir -p "$DIR" && cd "$DIR" && touch "${FILE}" 
  lf -remote "send $id cd '${DIR}'"
  lf -remote "send $id select '${FILE}'"
}}

cmd fzf_workdirs ${{
  sel=$(cat ~/.config/nvim/lua/workdirs.txt | fzf --layout=reverse --height 50% --ansi) || true
  lf -remote "send $id cd '${sel}'"
}}
map fw fzf_workdirs
map <c-t> fzf_workdirs

cmd fzf_dirs ${{
  directories=(
    ~/.config
    ~/Dev
    ~/Desktop
    ~/Downloads
    ~/Dropbox
    ~/pCloud
  )
  sel=$(fd . -H -L -E '*.git*' -E node_modules "${directories[@]}" | fzf --layout=reverse --height 50% --ansi) || true
  if [ -d "$sel" ]; then
    lf -remote "send $id cd '${sel}'"
    zoxide add "$sel"
  fi
  if [ -f "$sel" ]; then
    lf -remote "send $id select '${sel}'"
    zoxide add $(dirname "$sel")
  fi
}}
map fd fzf_dirs
map <c-p> fzf_dirs

cmd zi ${{
  result="$(zoxide query -i -- "$@")" || true
  lf -remote "send ${id} cd '${result}'"
}}
map zi zi

cmd duplicate_file ${{
  filename=$(basename "$fx")
  extension=${filename##*.}
  newfilename="${filename%.*}_copy.${extension}"
  cp "$fx" "$newfilename"
  lf -remote "send clear"
}}
map Y duplicate_file

cmd fzf_current_dir_all ${{
  sel=$(fd . -L -H -E '*.git*' -E node_modules | sort -nr | fzf --layout=reverse --height 50% --ansi) || true

  if [ -d "$sel" ]; then
    lf -remote "send $id cd '${sel}'"
    zoxide add "$sel"
  fi
  if [ -f "$sel" ]; then
    lf -remote "send $id select '${sel}'"
  fi
}}
map fc fzf_current_dir_all

cmd fzf_current_dir ${{
  sel=$(fd . -L -H -E '*.git*' -E node_modules --max-depth 1 | sort -nr | fzf --height 80% --layout=reverse --ansi) || true

  if [ -d "$sel" ]; then
    lf -remote "send $id cd '${sel}'"
    zoxide add "$sel"
  fi
  if [ -f "$sel" ]; then
    lf -remote "send $id select '${sel}'"
  fi
}}
map fs fzf_current_dir

cmd move_to_dir ${{
  directories=(
    ~/.config
    ~/Dev
    ~/Desktop
    ~/Downloads
    ~/Dropbox
    ~/pCloud
  )
  sel=$(fd . -H --type d -L -E '*.git*' -E node_modules "${directories[@]}" | \
        fzf --layout=reverse --height 50% --ansi) || true
  if [ -d "$sel" ]; then
    filename=$(basename "$fx")
    mv $fx "$sel"
    lf -remote "send $id select '${sel}/${filename}'"
    lf -remote "send clear"
  fi
}}
map fm move_to_dir

cmd list_tags ${{
  sel=$(cat ~/.local/share/lf/tags | fzf --height 80% --layout=reverse --ansi) || true
  sel="${sel%??}"
  lf -remote "send $id select '${sel}'"
}}
map gt list_tags

cmd copy_path ${{
  printf '%s' "$fx" | pbcopy
}}

cmd Quit ${{
  cache_dir="$HOME/.cache/lf"
  cache_file="$cache_dir/last_dir"
  if [ ! -f "$cache_file" ]; then
    mkdir -p $cache_dir
    # touch "$cache_file"
  fi
  echo "$PWD" > $cache_file
  lf -remote "send $id quit"
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

cmd stripspace %stripspace "$f"

# Bindings

# Open file in Nivm and new terminal
cmd open_nvim ${{
  open -na alacritty --args --working-directory "$(dirname ${fx})" -e fish -ic "nvim $fx"
}}

# Archive Mappings
# map az zip
# map at tar
# map ag targz
# map ab targz
# map au unarchive

# Trash Mappings
map dd trash

map ss stripspace

# Basic Functions
# map . set hidden!
map . push $<space>$fx<left><left><left><left>
map ad mkdir
map af mkfile
map x cut
map <enter> open
map tt tag-toggle
map tc $trash -ey
map dy $open -a Yoink $fx
map Q $qlmanage -p "$fx" > /dev/null 2> /dev/null &
map of $open -R "$fx"
map oz $zathura "$fx" &
map on open_nvim
map yy copy
map yp copy_path
map H top
map L bottom
map R reload
map C clear
map U unselect
map st :set sortby time; set info time; set reverse; top
map sa :set sortby atime; set info atime; set reverse; top
map sc :set sortby ctime; set info ctime; set reverse; top
map q Quit

map gd cd ~/Downloads
map gs cd ~/Desktop/ScreenShots

map gc cd ~/.config
map gl cd ~/.local
map gE cd /etc

# toggle preview
map ~ ${{
	lf -remote "send $id set preview!"
  $lf_preview && lf -remote "send $id set ratios 1:4" || lf -remote "send $id set ratios 1:2:2"
}}
